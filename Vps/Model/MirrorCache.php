<?phpclass Vps_Model_MirrorCache extends Vps_Model_Proxy{    protected $_rowClass = 'Vps_Model_MirrorCache_Row';    protected $_sourceModel;    protected $_syncTimeField;    private $_checkCacheActive = false;    private $_checkCacheDone = array();    public function __construct(array $config = array())    {        if (isset($config['sourceModel'])) $this->_sourceModel = $config['sourceModel'];        if (isset($config['syncTimeField'])) $this->_syncTimeField = $config['syncTimeField'];        parent::__construct($config);    }    public function getSourceModel()    {        if (is_string($this->_sourceModel)) {            $modelName = $this->_sourceModel;            $this->_sourceModel = new $modelName();        }        return $this->_sourceModel;    }    public function countRows($where = array())    {        $this->checkCache('select');        return parent::countRows($where);    }    public function getIds($where=null, $order=null, $limit=null, $start=null)    {        $this->checkCache('select');        return parent::getIds($where, $order, $limit, $start);    }    public function getRows($where = array(), $order=null, $limit=null, $start=null)    {        $this->checkCache('select');        return parent::getRows($where, $order, $limit, $start);    }    public function checkCache($uniqueKey = null)    {        if (!$this->_checkCacheActive && (!$uniqueKey || !in_array($uniqueKey, $this->_checkCacheDone))) {            $this->_checkCacheDone[] = $uniqueKey;            if (!$this->_syncTimeField) {                throw new Vps_Exception("syncTimeField must be set when using MirrorCache");            }            Vps_Benchmark::count('mirror sync');            //$b = Vps_Benchmark::start('mirror sync');            // ohne dem check -> endlos-schleife            $this->_checkCacheActive = true;            $syncField = $this->_syncTimeField;            $proxyModel = $this->getProxyModel();            $pr = $proxyModel->getRow($proxyModel->select()->order($syncField, 'DESC'));            $cacheTimestamp = $pr ? $pr->$syncField : null;            if ($cacheTimestamp && !preg_match('/^[0-9]{4,4}-[0-1][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9]$/', $cacheTimestamp)) {                throw new Vps_Exception("syncTimeField must be of type datetime (yyyy-mm-dd hh:mm:ss) when using mirror cache");            }            $sourceModel = $this->getSourceModel();            if (!$cacheTimestamp) {                // kein cache vorhanden, alle kopieren                $cacheTimestamp = $this->_syncRows($sourceModel->getRows());            } else {                $select = $sourceModel->select()->where(                    new Vps_Model_Select_Expr_HigherDate($this->_syncTimeField, $cacheTimestamp)                );                $rows = $sourceModel->getRows($select);                $cacheTimestamp = $this->_syncRows($rows, $cacheTimestamp);            }            $this->_checkCacheActive = false;            //if ($b) $b->stop();        }    }    /**     * @return mixed $updatedToTime The updated cache time     */    private function _syncRows($data, $cacheTime = null)    {        if (!is_array($data)) $data = $data->toArray();        $primaryKey = $this->getSourceModel()->getPrimaryKey();        $proxyModel = $this->getProxyModel();        foreach ($data as $row) {            $r = $proxyModel->getRow($row[$primaryKey]);            if (!$r) $r = $proxyModel->createRow();            foreach ($row as $column => $value) {                $r->$column = $value;            }            $r->save();            if (!$cacheTime || $row[$this->_syncTimeField] > $cacheTime) {                $cacheTime = $row[$this->_syncTimeField];            }        }        if (!$cacheTime) $cacheTime = date('Y-m-d H:i:s', time()-1);        return $cacheTime;    }}