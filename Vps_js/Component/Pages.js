Ext.namespace('Vps.Component');Vps.Component.Pages = Ext.extend(Ext.Panel, {    initComponent : function()    {        this.treePanel = new Vps.Auto.TreePanel({            controllerUrl: '/admin/component/pages',            title       : 'Seitenbaum',            region      : 'west',            split       : true,            width       : 300,            collapsible : true,            minSize     : 200,            maxSize     : 600,            tbar        : []        });        this.contentPanel = new Ext.TabPanel({            region      : 'center',            id          : 'contentPanel'        });        this.layout = 'border';        this.actions = {};        this.items = [this.treePanel, this.contentPanel];        Vps.Component.Index.superclass.initComponent.call(this);        this.treePanel.on('loaded', this.onTreePanelLoaded, this);        this.on('editcomponent', this.loadComponent, this);        this.setupEditform();    },    setupEditform : function ()    {        this.editDialog = new Vps.Auto.Form.Window({            width: 400,            height: 400,            controllerUrl: '/admin/component/pageEdit'        });        this.editDialog.on('datachange', function() {            var tree = this.treePanel.tree;            if (this.editDialog.getAutoForm().getBaseParams().parent_id != undefined) {                tree.selModel.selNode.parentNode.reload();            } else {                values = this.editDialog.getForm().getValues();                id = tree.selModel.selNode.id;                node = tree.getNodeById(id).setText(values.name);            }        }, this);    },    onTreePanelLoaded : function(tree)    {        this.pageButton = new Ext.Toolbar.Button({            cls     : 'x-btn-text-icon bmenu',            text    :'Page',            menu    : [                this.getAction('properties'),                this.getAction('add'),                this.getAction('delete'),                this.getAction('visible'),                this.getAction('makeHome')            ],            icon    : '/assets/silkicons/page.png',            disabled: true        });        this.treePanel.getTopToolbar().add(            this.getAction('edit'),            '-',            this.pageButton,            '-',            new Ext.Toolbar.Button({                cls: 'x-btn-text-icon bmenu',                text:'Navigation',                icon : '/assets/silkicons/weather_sun.png',                menu: [                    this.getAction('reloadAll'),                    this.getAction('expandAll'),                    this.getAction('collapseAll')                ]            })        );        this.contextMenu = new Ext.menu.Menu({             items: [                this.getAction('edit'),                '-',                this.getAction('properties'),                this.getAction('add'),                this.getAction('delete'),                this.getAction('visible'),                this.getAction('makeHome'),                '-',                this.getAction('reloadAll'),                this.getAction('expand'),                this.getAction('collapse')            ]        });        tree.on('click', this.treeSelectionchange, this);        tree.on('contextmenu', function (node) {            node.select();            this.treeSelectionchange(node);            this.contextMenu.show(node.ui.getAnchor());        }, this);        tree.on('dblclick', function (o, e) {            this.fireEvent('editcomponent', {id: o.attributes.id, cls: o.attributes.data.component_class, text: o.text})        }, this);    },    treeSelectionchange : function (node) {        if (node) {            this.pageButton.enable();            if (node.attributes.type == 'category') {                this.getAction('edit').disable();                this.getAction('properties').disable();                this.getAction('delete').disable();                this.getAction('visible').disable();                this.getAction('makeHome').disable();            } else {                this.getAction('edit').enable();                this.getAction('properties').enable();                this.getAction('delete').enable();                this.getAction('visible').enable();                this.getAction('makeHome').enable();            }        }    },    loadComponent: function(data)    {        if (this.contentPanel.getItem(data.text)) {            var panel = this.contentPanel.getItem(data.text);        } else {            var panel = this.createComponentPanel(data);            this.contentPanel.add(panel);            this.contentPanel.setActiveTab(panel);        }        data.componentClass = data.cls;        data.pageId = data.id;        data.componentKey = '';        panel.loadComponent(data);    },    createComponentPanel: function(data)    {        var panel = new Ext.Panel({            layout      : 'fit',            region      : 'center',            closable    : true,            id          : data.text,            title       : data.text,            tbar        : [],            items       : [new Ext.Panel({                region  : 'center',                id      : 'componentPanel'            })]        });        panel.loadComponent = function(data){            Ext.Ajax.request({                url: '/admin/component/edit/' + data.componentClass + '/jsonIndex/',                params: { page_id: data.pageId, component_key: data.componentKey },                success: function(r) {                    response = Ext.decode(r.responseText);                    cls = eval(response['class']);                    if (cls) {                        var panel2 = new cls(Ext.applyIf(response.config, {                            region          : 'center',                            autoScroll      : true,                            closable        : true,                            id              : 'componentPanel'                        }));                        panel2.on('editcomponent', this.loadComponent, this);                        this.addToolbarButton(data);                        this.remove(this.items.item('componentPanel'));                        this.add(panel2);                        this.layout.rendered = false;                        this.doLayout();                    }                },                scope: this            });        }        panel.addToolbarButton = function(data){            var toolbar = this.getTopToolbar();            var count = toolbar.items.getCount();            del = count;            for (var x=0; x<count; x++){                var item = toolbar.items.itemAt(x);                if (item.params != undefined &&                     item.params.pageId == data.pageId &&                     item.params.componentKey == data.componentKey                ) {                    del = x > 0 ? x - 1 : x;                    x = count;                }            }            for (var x=count-1; x>=del; x--){                var item = toolbar.items.itemAt(x);                toolbar.items.removeAt(x);                item.destroy();            }            if (toolbar.items.getCount() >= 1) {                 toolbar.addSeparator();            }            toolbar.addButton({                text    : data.text,                handler : function (o, e) {                    this.loadComponent(data);                },                params: data,                scope   : this            });        }        return panel;    },    getAction : function(type)    {        if (this.actions[type]) return this.actions[type];        if (type == 'edit') {            this.actions[type] = new Ext.Action({                text    : 'Edit Content',                disabled: true,                handler : function (o, e) {                    node = this.treePanel.tree.getSelectionModel().getSelectedNode();                    this.fireEvent('editcomponent', {id: node.attributes.id, cls: node.attributes.data.component_class, text: node.text});                },                icon    : '/assets/silkicons/page_edit.png',                cls     : 'x-btn-text-icon',                scope   : this            });        } else if (type == 'properties') {            this.actions[type] = new Ext.Action({                text    : 'Properties of selected Page',                handler : function () {                    this.editDialog.getAutoForm().setBaseParams({});                    this.editDialog.showEdit(this.treePanel.tree.selModel.selNode.id);                },                icon    : '/assets/silkicons/page_gear.png',                cls     : 'x-btn-text-icon',                scope   : this            });        } else if (type == 'add') {            this.actions[type] = new Ext.Action({                text    : 'Add new Subpage',                handler : function () {                    this.editDialog.getAutoForm().setBaseParams({                        parent_id: this.treePanel.tree.selModel.selNode.id                    });                    this.editDialog.showAdd();                },                icon    : '/assets/silkicons/page_add.png',                cls     : 'x-btn-text-icon',                scope   : this            });        } else if (type == 'delete') {            this.actions[type] = new Ext.Action({                text    : 'Delete selected Page',                handler : this.treePanel.onDelete,                icon    : '/assets/silkicons/page_delete.png',                cls     : 'x-btn-text-icon',                scope   : this.treePanel            });        } else if (type == 'visible') {            this.actions[type] = new Ext.Action({                text    : 'Toggle Visibility of selected Page',                handler : this.treePanel.onVisible,                icon    : '/assets/silkicons/page_red.png',                cls     : 'x-btn-text-icon',                scope   : this.treePanel            });        } else if (type == 'makeHome') {            this.actions[type] = new Ext.Action({                text    : 'Make selected Page Homepage',                handler : function (o, e) {                    Ext.Ajax.request({                        url: '/admin/component/pages/jsonMakeHome',                        success: function(r) {                            response = Ext.decode(r.responseText);                            var oldhome = this.treePanel.tree.getNodeById(response.oldhome);                            oldhome.attributes.visible = response.oldhomeVisible;                            this.treePanel.setVisible(oldhome);                            var home = this.treePanel.tree.getNodeById(response.home);                            home.ui.iconNode.style.backgroundImage = 'url(/assets/silkicons/application_home.png)';                        },                        params: {id: this.treePanel.tree.getSelectionModel().getSelectedNode().id },                        scope: this                    });                },                icon    : '/assets/silkicons/application_home.png',                cls     : 'x-btn-text-icon',                scope   : this            });        } else if (type == 'reloadAll') {            this.actions[type] = new Ext.Action({                text    : 'Reload all',                handler : function () { this.treePanel.tree.getRootNode().reload(); },                icon    : '/assets/silkicons/bullet_star.png',                cls     : 'x-btn-text-icon',                scope   : this            });        } else if (type == 'expand') {            this.actions[type] = new Ext.Action({                text    : 'Expand here',                handler : function () { this.treePanel.tree.getSelectionModel().getSelectedNode().expand(true); },                icon    : '/assets/silkicons/bullet_add.png',                cls     : 'x-btn-text-icon',                scope   : this            });        } else if (type == 'collapse') {            this.actions[type] = new Ext.Action({                text    : 'Collapse here',                handler : function () { this.treePanel.tree.getSelectionModel().getSelectedNode().collapse(true); },                icon    : '/assets/silkicons/bullet_delete.png',                cls     : 'x-btn-text-icon',                scope   : this            });        } else if (type == 'expandAll') {            this.actions[type] = new Ext.Action({                text    : 'Expand All',                handler : function () { this.treePanel.tree.expandAll(); },                icon    : '/assets/silkicons/bullet_add.png',                cls     : 'x-btn-text-icon',                scope   : this            });        } else if (type == 'collapseAll') {            this.actions[type] = new Ext.Action({                text    : 'Collapse all',                handler : function () { this.treePanel.tree.collapseAll(); },                icon    : '/assets/silkicons/bullet_delete.png',                cls     : 'x-btn-text-icon',                scope   : this            });        } else {            throw 'unknown action-type: ' + type;        }        return this.actions[type];    }});Vps.Component.PagesNode = Ext.extend(Vps.Auto.TreeNode, {    onDblClick : function(e){        e.preventDefault();        this.fireEvent("dblclick", this.node, e);    }});