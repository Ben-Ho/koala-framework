<?phpclass Vpc_Directories_List_View_Component extends Vpc_Abstract_Composite_Component    implements Vpc_Paging_ParentInterface{    protected $_items;    public static function getSettings()    {        $ret = parent::getSettings();        $ret['generators']['child']['component']['paging'] = 'Vpc_Paging_Component';        $ret['placeholder']['noEntriesFound'] = trlVps('No entries were found.');        $ret['groupById'] = true;        $ret['viewCache'] = false;        $ret['cssClass'] = 'webStandard';        $ret['searchQueryFields'] = '*';        return $ret;    }    protected function _getSearchForm()    {        $generators = $this->_getSetting('generators');        if (isset($generators['child']['component']['searchForm'])) {            return $this->getData()->getChildComponent('-searchForm');        }        return null;    }    protected function _getSelect()    {        $ret = $this->getData()->parent->getComponent()->getSelect();        $searchForm = $this->_getSearchForm();        if ($searchForm && $searchForm->getComponent()->isSaved()) {            $values = $searchForm->getComponent()->getFormRow()->toArray();            unset($values['id']);            $ret->searchLike($values, $this->_getSetting('searchQueryFields'));        }        return $ret;    }    public function getItems()    {        return $this->_getItems();    }    protected function _getItems()    {        if (!$this->_items) {            $select = $this->_getSelect();            if (!$select) return array();            $pagingComponent = $this->getData()->getChildComponent('-paging');            if ($pagingComponent) {                $pagingComponent->getComponent()->limitSelect($select);            }            if ($this->_getSetting('groupById')) {                //TODO//                 $select->group($select->getTableName().'.id');            }            $itemDirectory = $this->getData()->parent->getComponent()->getItemDirectory();            if (is_string($itemDirectory)) {                $c = Vpc_Abstract::getComponentClassByParentClass($itemDirectory);                $generator = Vps_Component_Generator_Abstract::getInstance($c, 'detail');                $this->_items = $generator->getChildData(null, array('select'=>$select));            } else {                $this->_items = $itemDirectory->getChildComponents($select);            }            foreach ($this->_items as $item) {                $item->parent->getComponent()->callModifyItemData($item);            }        }        return $this->_items;    }    public function getTemplateVars()    {        $ret = parent::getTemplateVars();        $ret['items'] = $this->_getItems();        $ret['directory'] = $this->getData()->parent->getComponent()->getItemDirectory();        $ret['formSaved'] = null;        if ($this->_getSearchForm()) {            $ret['formSaved'] = $this->_getSearchForm()->getComponent()->isSaved();        }        return $ret;    }    public function getPagingCount()    {        $select = $this->_getSelect();        if (!$select) return 0;        $dir = $this->getData()->parent->getComponent()->getItemDirectory();        if (is_string($dir)) {            $c = Vpc_Abstract::getComponentClassByParentClass($dir);            $generator = Vps_Component_Generator_Abstract::getInstance($c, 'detail');            $ret = $generator->countChildData(null, array('select'=>$select));        } else {            $ret = $dir->countChildComponents($select);        }        if ($select->hasPart(Vps_Model_Select::LIMIT_COUNT)) {            $limitCount = $select->getPart(Vps_Model_Select::LIMIT_COUNT);            if ($ret > $limitCount) $ret = $limitCount;        }        return $ret;    }    public function hasContent()    {        if (count($this->_getItems()) > 0) {            return true;        }        return parent::hasContent();    }    public function getViewCacheLifetime()    {        $dir = $this->getData()->parent->getComponent()->getItemDirectory();        if (is_string($dir)) {            return call_user_func(array($dir, 'getViewCacheLifetimeForView'));        } else {            return $dir->getComponent()->getViewCacheLifetimeForView();        }    }}