<?phpclass Vpc_Directories_List_View_Component extends Vpc_Abstract_Composite_Component    implements Vpc_Paging_ParentInterface{    protected $_items;        public static function getSettings()    {        $ret = parent::getSettings();        $ret['generators']['child']['component']['paging'] = 'Vpc_Paging_Component';        $ret['groupById'] = true;        $ret['viewCache'] = false;        $ret['cssClass'] = 'webStandard';        $ret['searchQueryFields'] = '*';        return $ret;    }    protected function _getSearchForm()    {        $generators = $this->_getSetting('generators');        if (isset($generators['child']['component']['searchForm'])) {            return $this->getData()->getChildComponent('-searchForm');        }        return null;    }    protected function _getSelect()    {        $ret = $this->getData()->parent->getComponent()->getSelect();        $searchForm = $this->_getSearchForm();        if ($searchForm) {            $formRow = $searchForm->getComponent()->getFormRow();            $ret->searchLike($formRow->toArray(), $this->_getSetting('searchQueryFields'));        }        return $ret;    }    protected function _getItems()    {        if (!$this->_items) {            $select = $this->_getSelect();            if (!$select) return array();            $this->getData()->getChildComponent('-paging')                ->getComponent()->limitSelect($select);            if ($this->_getSetting('groupById')) {                //TODO//                 $select->group($select->getTableName().'.id');            }            $itemDirectory = $this->getData()->parent->getComponent()->getItemDirectory();            if (is_string($itemDirectory)) {                $c = Vpc_Abstract::getComponentClassByParentClass($itemDirectory);                $generator = Vps_Component_Generator_Abstract::getInstance($c, 'detail');                $this->_items = $generator->getChildData(null, array('select'=>$select));            } else {                $this->_items = $itemDirectory->getChildComponents($select);            }            foreach ($this->_items as $item) {                $item->parent->getComponent()->callModifyItemData($item);            }        }        return $this->_items;    }    public function getTemplateVars()    {        $ret = parent::getTemplateVars();        $ret['items'] = $this->_getItems();        $ret['directory'] = $this->getData()->parent->getComponent()->getItemDirectory();        return $ret;    }    public function getPagingCount()    {        $select = $this->_getSelect();        $dir = $this->getData()->parent->getComponent()->getItemDirectory();        return $dir->countChildComponents($select);    }        public function hasContent()    {        if (count($this->_getItems()) > 0) {            return true;        }        return parent::hasContent();    }}