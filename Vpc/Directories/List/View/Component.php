<?phpclass Vpc_Directories_List_View_Component extends Vpc_Abstract_Composite_Component    implements Vpc_Paging_ParentInterface, Vps_Component_Partial_Interface{    protected $_items;    public static function getSettings()    {        $ret = parent::getSettings();        $ret['generators']['child']['component']['paging'] = 'Vpc_Paging_Component';        $ret['placeholder']['noEntriesFound'] = trlVps('No entries were found.');        $ret['groupById'] = true;        $ret['cssClass'] = 'webStandard';        $ret['searchQueryFields'] = '*';        return $ret;    }    protected function _getSearchForm()    {        $generators = $this->_getSetting('generators');        if (isset($generators['child']['component']['searchForm'])) {            return $this->getData()->getChildComponent('-searchForm');        }        return null;    }    protected function _getSelect()    {        $ret = $this->getData()->parent->getComponent()->getSelect();        $searchForm = $this->_getSearchForm();        if ($searchForm && $searchForm->getComponent()->isSaved()) {            $values = $searchForm->getComponent()->getFormRow()->toArray();            unset($values['id']);            $ret->searchLike($values, $this->_getSetting('searchQueryFields'));        }        return $ret;    }    protected function _getPagingComponent()    {        return $this->getData()->getChildComponent('-paging');    }    public function getItemIds()    {        $select = $this->_getSelect();        if (!$select) return array();        $select = $this->_formatSelect($select);        $itemDirectory = $this->getData()->parent->getComponent()->getItemDirectory();        if (is_string($itemDirectory)) {            $c = Vpc_Abstract::getComponentClassByParentClass($itemDirectory);            $generator = Vps_Component_Generator_Abstract::getInstance($c, 'detail');            $items = $generator->getChildIds(null, array('select'=>$select));        } else {            $items = $itemDirectory->getChildIds($select);        }        return $items;    }    protected function _getItems($select = null)    {        if (!$select) $select = $this->_getSelect();        if (!$select) return array();        $select = $this->_formatSelect($select);        $itemDirectory = $this->getData()->parent->getComponent()->getItemDirectory();        if (is_string($itemDirectory)) {            $c = Vpc_Abstract::getComponentClassByParentClass($itemDirectory);            $generator = Vps_Component_Generator_Abstract::getInstance($c, 'detail');            $items = $generator->getChildData(null, array('select'=>$select));        } else {            $items = $itemDirectory->getChildComponents($select);        }        foreach ($items as &$item) {            $item->parent->getComponent()->callModifyItemData($item);        }        return $items;    }    public function getItems()    {        return $this->_getItems();    }    private function _formatSelect($select)    {        if (!$select->hasPart(Vps_Component_Select::WHERE_ID)) {            $pagingComponent = $this->_getPagingComponent();            if ($pagingComponent) {                $pagingComponent->getComponent()->limitSelect($select);            }        }        return $select;    }    public function getTemplateVars()    {        $ret = parent::getTemplateVars();        $ret['partialParams'] = $this->getPartialParams();        $ret['directory'] = $this->getData()->parent->getComponent()->getItemDirectory();        $ret['formSaved'] = null;        if ($this->_getSearchForm()) {            $ret['formSaved'] = $this->_getSearchForm()->getComponent()->isSaved();        }        return $ret;    }    // fÃ¼r helper partialPaging    public function getPartialParams()    {        $paging = $this->getData()->getChildComponent('-paging');        $ret = array();        $ret['componentId'] = $this->getData()->componentId;        $ret['count'] = $this->getPagingCount();        if ($paging) {            $ret = array_merge($ret, $paging->getComponent()->getPartialParams());        }        return $ret;    }    public function getPartialVars($partial, $nr, $info)    {        if (!$partial instanceof Vps_Component_Partial_Paging)            throw new Vps_Exception('Only Vps_Component_Partial_Paging supported');        $ret = array();        if ($partial instanceof Vps_Component_Partial_Id) {            $select = $this->_getSelect()->whereId($nr);        } else if ($partial instanceof Vps_Component_Partial_Paging) {            $select = $this->_getSelect()->limit(1, $nr);        }        $ret['item'] = array_shift($this->_getItems($select));        $ret['number'] = $info['number'];        $ret['total'] = $info['total'];        return $ret;    }    public function getPartialClass()    {        $partialClass = 'Vps_Component_Partial_Paging';        if ($this->_getSearchForm()) {            $partialClass = 'Vps_Component_Partial_Id';        }        return $partialClass;    }    public function getPagingCount($select = null)    {        if (!$select) $select = $this->_getSelect();        if (!$select) return 0;        $dir = $this->getData()->parent->getComponent()->getItemDirectory();        if (is_string($dir)) {            $c = Vpc_Abstract::getComponentClassByParentClass($dir);            $generator = Vps_Component_Generator_Abstract::getInstance($c, 'detail');            $ret = $generator->countChildData(null, array('select'=>$select));        } else {            $ret = $dir->countChildComponents($select);        }        if ($select->hasPart(Vps_Model_Select::LIMIT_COUNT)) {            $limitCount = $select->getPart(Vps_Model_Select::LIMIT_COUNT);            if ($ret > $limitCount) $ret = $limitCount;        }        return $ret;    }    public function hasContent()    {        if ($this->getPagingCount() > 0) return true;        return parent::hasContent();    }    public function getViewCacheLifetime()    {        $dir = $this->getData()->parent->getComponent()->getItemDirectory();        if (!$dir) {            return parent::getViewCacheLifetime();        } else if (is_string($dir)) {            return call_user_func(array($dir, 'getViewCacheLifetimeForView'));        } else {            return $dir->getComponent()->getViewCacheLifetimeForView();        }    }}