<?phpclass Vpc_Directories_List_View_Component extends Vpc_Abstract_Composite_Component    implements Vpc_Paging_ParentInterface{    protected $_items;        public static function getSettings()    {        $ret = parent::getSettings();        $ret['generators']['child']['component']['paging'] = 'Vpc_Paging_Component';        $ret['groupById'] = true;        $ret['viewCache'] = false;        $ret['cssClass'] = 'webStandard';        $ret['searchQueryFields'] = '*';        return $ret;    }    protected function _getSearchForm()    {        $generators = $this->_getSetting('generators');        if (isset($generators['child']['component']['searchForm'])) {            return $this->getData()->getChildComponent('-searchForm');        }        return null;    }    protected function _getSelect()    {        $ret = $this->getData()->parent->getComponent()->getSelect();        $searchForm = $this->_getSearchForm();        if ($searchForm) {            $formRow = $searchForm->getComponent()->getFormRow();            $selectInfo = $ret->info();            foreach ($formRow->toArray() as $column => $value) {                if (empty($formRow->$column) ||                    ($column != 'query' && !in_array($column, $selectInfo['cols']))                ) {                    continue;                }                $searchWords = preg_split('/[\s-+,;]/', $formRow->$column);                foreach ($searchWords as $searchWord) {                    $searchWord = trim($searchWord);                    if (empty($searchWord)) continue;                    if ($column == 'query') {                        $queryFields = $this->_getSetting('searchQueryFields');                        if ($queryFields) {                            if (!is_array($queryFields)) $queryFields = array($queryFields);                            if (in_array('*', $queryFields)) {                                $queryFields = $selectInfo['cols'];                            }                            $wheres = array();                            foreach ($queryFields as $field) {                                $wheres[] = Vps_Registry::get('db')->quoteInto(                                    $selectInfo['name'].'.'.$field.' LIKE ?', "%$searchWord%"                                );                            }                            $ret->where(implode(' OR ', $wheres));                        }                    } else {                        $ret->where($column.' LIKE ?', "%".$searchWord."%");                    }                }            }        }        return $ret;    }    protected function _getItems()    {        if (!$this->_items) {            $select = $this->_getSelect();            if (!$select) return array();            $this->getData()->getChildComponent('-paging')                ->getComponent()->limitSelect($select);            if ($this->_getSetting('groupById')) {                $select->group($select->getTableName().'.id');            }            $this->_items = $this->getData()->parent->getComponent()->getItemDirectory()                        ->getChildComponents($select);            foreach ($this->_items as $item) {                $this->getData()->parent->getComponent()->getItemDirectory()                    ->getComponent()->callModifyItemData($item);            }        }        return $this->_items;    }    public function getTemplateVars()    {        $ret = parent::getTemplateVars();        $ret['items'] = $this->_getItems();        $ret['directory'] = $this->getData()->parent->getComponent()->getItemDirectory();        return $ret;    }    public function getPagingCount()    {        return $this->_getSelect();    }        public function hasContent()    {        if (count($this->_getItems()) > 0) {            return true;        }        return parent::hasContent();    }}