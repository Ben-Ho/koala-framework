Kwf.EyeCandy.List.Plugins.ActiveChanger.Hash = Ext.extend(Kwf.EyeCandy.List.Plugins.Abstract, {
    _hashDelimiter: ':',

    init: function() {
        this._initHistory();

        this.list.on('childClick', function(item, ev) {
            ev.stopEvent();
            this._addHashPart(this._getItemId(item));
        }, this);

        Ext.History.on('change', function(token) {
            this._setActiveItemByToken(token);
        }, this);
    },

    render: function() {
        this._setActiveItemByToken();
    },

    _addHashPart: function(hashPart) {
        var hashes = this._getHashes();
        var newHashes = [];

        // check current hashes if any item of the current list matches
        // if yes, than delete it, because a new hash part will be added
        for (var i=0; i<hashes.length; i++) {
            var found = false;
            this.list.items.forEach(function(item) {
                if (this._getItemId(item) == hashes[i]) {
                    found = true;
                }
            }, this);

            if (!found) newHashes.push(hashes[i]);
        }
        newHashes.push(hashPart);
        Ext.History.add(newHashes.join(this._hashDelimiter));
    },

    _getItemId: function(item) {
        if (!item.id) throw "list items must have an id when ActiveChanger.Hash plugin is used.";
        if (item.id.substr(0, 4) == "ext-") throw "list items must have an unique id when ActiveChanger.Hash plugin is used, this one was generated by ext: "+item.id;
        return item.id;
    },

    _getHashes: function(token) {
        var hash = token || Ext.History.getToken();
        if (!hash) return '';
        return hash.split(this._hashDelimiter);
    },

    _setActiveItemByToken: function(token) {
        var hashes = this._getHashes(token);
        if (hashes) {
            hashes.forEach(function(hash) {
                this.list.items.forEach(function(item) {
                    if (this._getItemId(item) == hash) this.list.setActiveItem(item);
                }, this);
            }, this);
        }
    },

    _initHistory: function() {
        // whyever Ext.History.init() doesn't do this itself...
        if (!document.getElementById('history-form')) {
            var form = Ext.DomHelper.append(document.body, {
                tag: 'form', id: 'history-form', cls: 'x-history-field', children: [
                    { tag: 'input', type: 'hidden', id: 'x-history-field' },
                    { tag: 'iframe', id: 'x-history-frame' }
                ]
            });
            Ext.get(form).setDisplayed(false);
            Ext.History.init();
        }
    }
});
