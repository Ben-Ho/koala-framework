#!/usr/bin/php
<?php

$baseDir = "/var/www";
//$baseDir = "/www/public";

$websDir = $baseDir;
//$websDir = $baseDir.'/vps-projekte';

$excludeGroup = 'reallySlow';
//$excludeGroup = 'slow';

set_include_path("$baseDir/library/zend/1.7.5");
require_once 'Zend/Loader.php';
Zend_Loader::registerAutoload();

exec('ps ax', $out);
foreach ($out as $o) {
    //  PID TTY      STAT   TIME COMMAND
    if (preg_match('#^\s*([0-9]+)\s+\S+\s+\S+\s+([0-9]*):([0-9]*)\s+(.*)#', $o, $m)) {
        $pid = $m[1];
        $cmd = $m[4];
        if (getmypid() == $pid) continue;
        if (strpos($cmd,'run-vivid-test-server-tests')===false) continue;
        if (substr($cmd, 0, 4) != 'php ' && substr($cmd, 0, 13) != '/usr/bin/php ') continue;
    /*    
        echo "There is already a run-vivid-test-server-tests process running:\n";
        echo $o."\n\n\n";
        echo $pid."\n";
        echo "getmypid: ".getmypid()."\n";
        echo "ps aux | grep run_test:\n";
        system("ps aux | grep run-vivid-test-server-tests");
    */    
        exit;
    }
}

function execGetOutput($cmd, &$out)
{
    $descriptorspec = array(
        0 => array("pipe", "r"),
        1 => array("pipe", "w"),
        2 => array("pipe", "w")
    );
    $process = proc_open($cmd, $descriptorspec, $pipes);
    if (!is_resource($process)) return 255;
    fclose($pipes[0]);
    stream_set_blocking($pipes[1], 0);
    stream_set_blocking($pipes[2], 0);
    while(!feof($pipes[1]) && !feof($pipes[2])) {
        if (!feof($pipes[1])) {
            $o = fgets($pipes[1]);
            if ($o) {
                echo $o;
                $out .= $o;
            }
        }
        if (!feof($pipes[2])) {
            $o = fgets($pipes[2]);
            if ($o) {
                echo $o;
                $out .= $o;
            }
        }
        usleep(500);
    }
    return proc_close($process);
}


foreach (new DirectoryIterator($websDir) as $p) {
    if ($p->isDot()) continue;
    if (!$p->isDir()) continue;
    if ($p == 'library') continue;
    if ($p == 'uploads') continue;
    if ($p == '.svn') continue;
    if ($p == 'backup') continue;
    if ($p == 'rssinclude-updater') continue;
    if ($p == 'test.rssinclude-updater') continue;
    if (!file_exists($p->getPathname().'/.svn')) continue;


    echo "killing remaining firefox processes\n";
    $out = '';
    $cmd = '/usr/local/bin/winexe -U VPS/selenium%selenium //vivid-test "cmd /C tasklist /V /FO CSV" 2>&1';
    exec($cmd, $out);
    echo "$cmd\n";
    var_dump($out);
    foreach ($out as $l) {
        $l = explode(',', $l);
        if ($l[0] == '"firefox.exe"' && $l[6] == '"VIVID-TEST\selenium"') {
            $pid = $l[1];
            $cmd = '/usr/local/bin/winexe -U VPS/selenium%selenium //vivid-test "cmd /C taskkill /PID '.$pid.' /F"';
            echo "$cmd\n";
            system($cmd);
        }
    }

    echo $p."\n";
    chdir($p->getPathname());
    $out = '';
    $ret = execGetOutput("php bootstrap.php svn-up", $out);
    $postData = array(
        'tests' => 0,
        'failures' => 1,
        'skipped' => 0,
        'not_implemented' => 0,
        'log' => '',
        'web_version' => '?',
        'vps_version' => '?'
    );
    if ($ret) {
        $postData['log'] = "UPDATE FAILED\n\n\n".$out;
    } else {
        $ret = execGetOutput("php bootstrap.php test --no-progress --report --exclude-group=$excludeGroup", $out);
        if (preg_match("#===REPORT===(.*?)===/REPORT===#m", $out, $m)) {
            $postData = @unserialize($m[1]);
            if (!$postData) {
                $postData['log'] = "TESTS FAILED\n\n\n(can't unserialize result)\n".$out;
            } else {
                $postData['log'] = $out;
            }
        } else {
            $postData['log'] = "TESTS FAILED\n\n\n(can't get result)\n".$out;
        }
    }
    $postData['log'] = "$p\n\n".$postData['log'];

    $info = new SimpleXMLElement(`svn info --xml`);
    $postData['svnPath'] = (string)$info->entry->url;

    $client = new Zend_Http_Client('http://zeiterfassung.vivid/test_report.php');
    $client->setMethod(Zend_Http_Client::POST);
    $client->setParameterPost($postData);
    $response = $client->request();
    if ($response->getBody() != 'OK') {
        echo "Can't report to zeiterfassung: ".$response->getBody()."\n";
    }
    echo "\n\n";
}
