#!/usr/bin/php
<?php

$excludeDirs = array(
    '.git',
    'node_modules',
    'tests',
    'test',
    'doc',
    'docs',
    'docs_src',
    'examples',
);
$gitignorewhiteList = array(
    'vendor', 'build'
);
$additionalExcludes = array(
    'deploy.tar.gz', 'config_section', 'config.local.ini'
);

if (!file_exists(('bootstrap.php'))) {
    echo "Run this script in the application root directory\n";
    exit(1);
}

echo "clearing cache...\n";
systemCheckRet("php bootstrap.php clear-cache --exclude-type=apc,optcode");

echo "\n\nrefreshing build...\n";
systemCheckRet("php bootstrap.php build");

function systemCheckRet($cmd)
{
    $ret = null;
    passthru($cmd, $ret);
    if ($ret != 0) {
        exit($ret);
    }
}
class RecursiveFilterExcludeDirsIterator extends RecursiveFilterIterator {

    public function accept() {
        return !in_array(
            $this->current()->getFilename(),
            $GLOBALS['excludeDirs'],
            true
        );
    }
}
class ExcludeDirsFilterIterator extends FilterIterator {

    public function accept() {
        return in_array(
            $this->current()->getFilename(),
            $GLOBALS['excludeDirs'],
            true
        );
    }
}

class GitignoreFilterIterator extends FilterIterator {

    public static $FILTERS = array(
        '.gitignore',
    );

    public function accept() {
        return in_array(
            $this->current()->getFilename(),
            self::$FILTERS,
            true
        );
    }
}

$it = new RecursiveDirectoryIterator('.');
$it = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::SELF_FIRST);
$it = new ExcludeDirsFilterIterator($it);
foreach ($it as $i) {
    $excludes[] = $i->__toString();
}

$it = new RecursiveDirectoryIterator('.');
$it = new RecursiveFilterExcludeDirsIterator($it);
$it = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::SELF_FIRST);
$it = new GitignoreFilterIterator($it);
foreach ($it as $filePath => $fileInfo) {
    foreach (file($fileInfo->__toString()) as $pattern) {
        if (substr($pattern, 0, 1) == '!') continue;
        $excludes[] = substr($fileInfo->__toString(), 0, -10).trim($pattern);
    }
}

foreach ($excludes as $k=>$i) {
    if (substr($i, 0, 2) == './') {
        $excludes[$k] = substr($i, 2);
    }
}

$excludes = array_merge($excludes, $additionalExcludes);
$excludes = array_diff($excludes, $gitignorewhiteList);
var_dump($excludes);
$excludeArgs = '';
foreach ($excludes as $i) {
    $excludeArgs .= " --exclude=./".escapeshellarg($i);
}
$cmd = "tar cfz deploy.tar.gz . $excludeArgs";
echo "\n\ncreating deploy.tar.gz archive...\n";
systemCheckRet($cmd);

echo "\ndeploy.tar.gz successfully created.\n";
