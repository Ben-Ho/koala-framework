#!/usr/bin/php
<?php
$validOptions = array('m', 'dry-run', 'debug');
$options = array();
$commitFiles = array();
$lastOptionName = false;
foreach ($_SERVER['argv'] as $k=>$i) {
    if ($k==0) continue;
    if (substr($i, 0, 1) == '-' && in_array(trim($i, '-'), $validOptions)) {
        $lastOptionName = trim($i, '-');
        if ($lastOptionName == 'm') $lastOptionName = 'message';
        if ($pos = strpos($i, '=')) {
            $options[substr($lastOptionName, 0, $pos-2)] = substr($lastOptionName, $pos-1);
        } else {
            $options[$lastOptionName] = true;
        }
    } else if ($lastOptionName) {
        $options[$lastOptionName] = $i;
        $lastOptionName = false;
    } else {
        $commitFiles[] = $i;
    }
}
if (!isset($options['message']) || !is_string($options['message'])) {
    die("missing parameter message\n");
}
$debug = isset($options['debug']) && $options['debug'];
$dryRun = isset($options['dry-run']) && $options['dry-run'];


$mergeToArray = array();

$xml = new SimpleXMLElement(`svn info --xml`);
$ownUrl = (string)$xml->entry->url;
if (preg_match('#branches/vps/1\\.6#', $ownUrl)) {
    if (file_exists('../vps-1.7-clean')) {
        $mergeToArray[] = '../vps-1.7-clean';
    } else if (file_exists('../vps-1.7')) {
        $mergeToArray[] = '../vps-1.7';
    } else if (file_exists('../1.7')) {
        $mergeToArray[] = '../1.7';
    } else {
        $mergeToArray[] = '../vps1.7';
    }
}

if (preg_match('#branches/vps/1\\.(6|7)#', $ownUrl)) {
    if (file_exists('../vps-1.8-clean')) {
        $mergeToArray[] = '../vps-1.8-clean';
    } else if (file_exists('../vps-1.8')) {
        $mergeToArray[] = '../vps-1.8';
    } else if (file_exists('../1.8')) {
        $mergeToArray[] = '../1.8';
    } else {
        $mergeToArray[] = '../vps1.8';
    }
}

if (file_exists('../vps-trunk-mergehere')) {
    $mergeToArray[] = '../vps-trunk-mergehere';
} else if (file_exists('../vps-trunk-clean')) {
    $mergeToArray[] = '../vps-trunk-clean';
} else if (file_exists('../trunk')) {
    $mergeToArray[] = '../trunk';
} else {
    $mergeToArray[] = '../vps';
}

echo "Merge to: ".implode(', ', $mergeToArray)."\n\n";

$ownDir = getcwd();
foreach ($mergeToArray as $mergeTo) {
    if (!file_exists($mergeTo)) die("$mergeTo does not exist");

    echo "updating $mergeTo...\n";
    $cmd = "svn up $mergeTo";
    $out = array();
    $ret = null;
    if ($debug) echo "$cmd\n";
    passthru($cmd, $ret);
    if ($ret) die("Update failed");

    echo "check for modified files $mergeTo...\n";
    $cmd = "svn st --xml $mergeTo";
    $out = array();
    $ret = null;
    if ($debug) echo "$cmd\n";
    exec($cmd, $out, $ret);
    if ($ret) die("Failed checking for modified files");
    $xml = new SimpleXMLElement(implode('', $out));
    if (!$xml) die("Failed checking for modified files");
    $files = array();
    foreach ($xml->target->entry as $e) {
        $files[(string)$e->{'wc-status'}['item']][] = (string)$e['path'];
    }
    if ($files) {
        if (!isset($files['normal']) || count($files) > 1) {
            echo "working copy contains ";
            foreach ($files as $status=>$f) {
                if ($status == 'normal') continue;
                echo count($f)." $status ";
            }
            echo "files\n";
        }
        if (isset($files['normal'])) {
            echo "working copy is not up to date\n";
        }
        die("You must not have modified files in '$mergeTo'\n");
    }

    echo "check for not yet merged commits $mergeTo...\n";
    $xml = new SimpleXMLElement(`svn info --xml`);
    $url = (string)$xml->entry->url;
    chdir($ownDir);
    if ($debug) echo "chdir $mergeTo\n";
    chdir($mergeTo);
    $cmd = "svn merge --dry-run $url";
    $out = array();
    $ret = null;
    if ($debug) echo "$cmd\n";
    exec($cmd, $out, $ret);
    if ($ret) die("Failed\n");
    if ($out) {
        echo "The following revisions are not yet merged\n";
        echo implode("\n", $out);
    }
}
chdir($ownDir);

$cmd = "svn commit";
foreach ($commitFiles as $i) {
    $cmd .= ' '.escapeshellarg($i);
}
$cmd .= " --message=".escapeshellarg($options['message']);
if ($dryRun || $debug) echo "$cmd\n";
if (!$dryRun) {
    passthru($cmd, $ret);
    if ($ret) exit(1);
}

foreach ($mergeToArray as $mergeTo) {
    $xml = new SimpleXMLElement(`svn info --xml`);
    $url = (string)$xml->entry->url;
    chdir($ownDir);
    if ($debug) echo "chdir $mergeTo\n";
    chdir($mergeTo);
    echo "chdir $mergeTo\n";
    $cmd = "svn merge $url";
    if ($dryRun || $debug) echo "$cmd\n";
    if (!$dryRun) {
        passthru($cmd, $ret);
        if ($ret) exit(1);
    }

    $cmd = "svn commit";
    $cmd .= " --message=".escapeshellarg('merged '.$options['message']);
    if ($dryRun || $debug) echo "$cmd\n";
    if (!$dryRun) {
        passthru($cmd, $ret);
        if ($ret) exit(1);
    }
}
